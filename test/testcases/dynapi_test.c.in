/*****************************************************************************/
/*  LibreDWG - free implementation of the DWG file format                    */
/*                                                                           */
/*  Copyright (C) 2019 Free Software Foundation, Inc.                        */
/*                                                                           */
/*  This library is free software, licensed under the terms of the GNU       */
/*  General Public License as published by the Free Software Foundation,     */
/*  either version 3 of the License, or (at your option) any later version.  */
/*  You should have received a copy of the GNU General Public License        */
/*  along with this program.  If not, see <http://www.gnu.org/licenses/>.    */
/*****************************************************************************/
/* dynapi coverage tests, generated by gen-dynapi.pl from dynapi_test.c.in
   do not modify */
/* written by: Reini Urban */

#line 17 "dynapi_test.c.in"
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <math.h>
#include <sys/stat.h>

#define DWG_LOGLEVEL DWG_LOGLEVEL_NONE
#include "dwg.h"
#include "dwg_api.h"
#include "../../src/dynapi.h"
#include "../../src/common.h"
CLANG_DIAG_IGNORE(-Wformat-nonliteral)
CLANG_DIAG_IGNORE(-Wmissing-prototypes)
#include <dejagnu.h>
CLANG_DIAG_RESTORE
CLANG_DIAG_RESTORE

/* for all objects/entities/header_vars:
   compare direct api vs dynapi values
*/
static int test_header (const Dwg_Data *dwg)
{
  int error = 0;
  BITCODE_RL rl;
  BITCODE_RC rc;
  BITCODE_BLL bll;
  BITCODE_BD bd;
  BITCODE_TV tv;

#line 48 "dynapi_test.c"
  /* @@for test_HEADER@@ */
#line 49 "dynapi_test.c.in"
  return error;
}

#line 5639 "dynapi_test.c"
/* @@for test_OBJECT@@ */

#line 56 "dynapi_test.c.in"
static int test_object (const Dwg_Data *restrict dwg, const Dwg_Object *restrict obj)
{
  int error = 0;
  if (obj->supertype == DWG_SUPERTYPE_UNKNOWN)
    return 0;
#line 39836 "dynapi_test.c"
  /* @@for if_test_OBJECT@@ */
#line 64 "dynapi_test.c.in"
  return error;
}

static int test_dynapi (const char *filename)
{
  int error;
  Dwg_Data dwg;
  BITCODE_BL i;

  dwg.opts = 0;
  if (dwg_read_file (filename, &dwg) >= DWG_ERR_CRITICAL)
    {
      dwg_free (&dwg);
      return 1;
    }
  error = test_header (&dwg);
  for (i=0; i<dwg.num_objects; i++)
    {
      error += test_object(&dwg, &dwg.object[i]);
    }
  dwg_free (&dwg);
  /* This value is the return value for `main',
     so clamp it to either 0 or 1.  */
  return error ? 1 : 0;
}

int
main (int argc, char *argv[])
{
  char *input = getenv ("INPUT");

  if (input == NULL)
    {
      struct stat attrib;
      input = (char*)"example_2000.dwg";
      if (stat(input, &attrib))
        {
          fprintf (stderr, "Env var INPUT not defined, %s not found\n", input);
          return EXIT_FAILURE;
        }
    }
  return test_dynapi (input);
}
